// import 'dart:io';
// import 'package:flutter/material.dart';
// import 'package:path_provider/path_provider.dart';
// import 'package:pdf/pdf.dart';
// import 'package:pdf/widgets.dart' as pw;

// class InvoiceItem {
//   String name;
//   int quantity;
//   double price;

//   InvoiceItem({required this.name, required this.quantity, required this.price});
// }

// class InvoiceWidget extends StatefulWidget {
//   final String invoiceNumber;
//   final String customerName;
//   final List<InvoiceItem> invoiceItems;

//   const InvoiceWidget({
//     Key? key,
//     required this.invoiceNumber,
//     required this.customerName,
//     required this.invoiceItems,
//   }) : super(key: key);

//   @override
//   _InvoiceWidgetState createState() => _InvoiceWidgetState();
// }

// class _InvoiceWidgetState extends State<InvoiceWidget> {
//   Future<void> _generatePdf() async {
//     final pdf = pw.Document();

//     // Add the header
//     pdf.addPage(pw.Page(
//       margin: pw.EdgeInsets.all(10),
//       build: (pw.Context context) {
//         return pw.Column(
//           crossAxisAlignment: pw.CrossAxisAlignment.start,
//           children: [
//             pw.Text('Invoice #${widget.invoiceNumber}', style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
//             pw.SizedBox(height: 10),
//             pw.Text('Customer: ${widget.customerName}', style: pw.TextStyle(fontSize: 16)),
//             pw.Divider(thickness: 1, height: 20),
//           ],
//         );
//       },
//     ));

//     // Add the invoice items table
//     pdf.addPage(pw.Page(
//       build: (pw.Context context) {
//         final headers = ['Name', 'Quantity', 'Price', 'Total'];
//         final data = widget.invoiceItems.map((item) => [item.name, item.quantity, item.price, item.quantity * item.price]).toList();
//         return pw.Column(
//           crossAxisAlignment: pw.CrossAxisAlignment.start,
//           children: [
//             pw.Text('Items:', style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
//             pw.Table.fromTextArray(headers: headers, data: data),
//             pw.SizedBox(height: 10),
//             pw.Divider(thickness: 1, height: 20),
//             pw.Row(
//               mainAxisAlignment: pw.MainAxisAlignment.end,
//               children: [
//                 pw.Text('Total: ${_calculateTotal().toStringAsFixed(2)}', style: pw.TextStyle(fontSize: 16, fontWeight: pw.FontWeight.bold)),
//               ],
//             ),
//           ],
//         );
//       },
//     ));

//     // Save the PDF file
//     final directory = await getApplicationDocumentsDirectory();
//     final path = '${directory.path}/invoice_${widget.invoiceNumber}.pdf';
//     final file = File(path);
//     await file.writeAsBytes(await pdf.save());

//     // Show a snackbar to indicate that the PDF file has been generated
//     ScaffoldMessenger.of(context).showSnackBar(
//       SnackBar(content: Text('Invoice PDF generated successfully!')),
//     );
//   }

//   double _calculateTotal() {
//     return widget.invoiceItems.fold(0, (sum, item) => sum + (item.quantity * item.price));
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: Text('Invoice'),
//       ),
//       body: Center(
//         child: Column(
//           mainAxisAlignment: MainAxisAlignment.center,
//           children: [
//             Text('Invoice #${widget.invoiceNumber}'),
//             SizedBox(height: 10),
//             Text('Customer: ${widget.customerName}'),
//             SizedBox(height: 20),
//             ElevatedButton(
//               onPressed: _generatePdf,
//               child: Text("generate pdf")
//             )
//           ]
//         )
//       )
//     )
//   }
// }
// class PdfApi {
//   static Future<File> generateInvoice(Invoice invoice) async {
//     final pdf = Document();

//     pdf.addPage(
//       MultiPage(
//         build: (context) => [
//           buildHeader(invoice),
//           SizedBox(height: 1 * PdfPageFormat.cm),
//           buildTitle(invoice),
//           buildInvoice(invoice),
//           Divider(),
//           buildTotal(invoice),
//         ],
//       ),
//     );

//     return saveDocument(name: '${invoice.customerName} invoice.pdf', pdf: pdf);
//   }

//   static Widget buildHeader(Invoice invoice) => Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: [
//           SizedBox(height: 1 * PdfPageFormat.cm),
//           Row(
//             mainAxisAlignment: MainAxisAlignment.spaceBetween,
//             children: [
//               buildSimpleText(invoice.info.description),
//               buildSimpleText(invoice.info.number),
//             ],
//           ),
//           SizedBox(height: 1 * PdfPageFormat.cm),
//           Row(
//             mainAxisAlignment: MainAxisAlignment.spaceBetween,
//             children: [
//               buildSimpleText(invoice.info.date),
//               buildSimpleText(''),
//             ],
//           ),
//         ],
//       );

//   static Widget buildTitle(Invoice invoice) => Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: [
//           Center(child: buildSimpleText('INVOICE')),
//           SizedBox(height: 1 * PdfPageFormat.cm),
//           Row(
//             mainAxisAlignment: MainAxisAlignment.spaceBetween,
//             children: [
//               buildSimpleText('Bill to:'),
//               buildSimpleText(''),
//             ],
//           ),
//           SizedBox(height: 0.5 * PdfPageFormat.cm),
//           buildSimpleText(invoice.customerName, size: 18),
//           SizedBox(height: 0.25 * PdfPageFormat.cm),
//           buildSimpleText(invoice.customerAddress),
//           SizedBox(height: 0.25 * PdfPageFormat.cm),
//           buildSimpleText('${invoice.customerCountry} - ${invoice.customerZipCode}'),
//           SizedBox(height: 1 * PdfPageFormat.cm),
//         ],
//       );

//   static Widget buildInvoice(Invoice invoice) => Table.fromTextArray(
//         headers: ['Description', 'Date', 'Quantity', 'Price', 'Total'],
//         data: invoice.items.map((item) => [
//           item.description,
//           item.date,
//           item.quantity,
//           '\$${item.price}',
//           '\$${item.total}',
//         ]).toList(),
//         headerStyle: TextStyle(fontWeight: FontWeight.bold),
//         headerDecoration: BoxDecoration(color: PdfColors.grey300),
//         cellAlignment: Alignment.centerLeft,
//         cellAlignments: {0: Alignment.centerLeft, 1: Alignment.centerRight, 2: Alignment.centerRight, 3: Alignment.centerRight, 4: Alignment.centerRight},
//         cellStyle: TextStyle(fontSize: 14),
//         border: null,
//         tableWidth: TableWidth.min,
//       );

//   static Widget buildTotal(Invoice invoice) {
//     final netTotal = invoice.items.map((item) => item.total).reduce((a, b) => a + b);

//     return Container(
//       alignment: Alignment.centerRight,
//       child: Column(
//         children: [
//           buildSimpleRow('Subtotal', '\$${netTotal.toStringAsFixed(2)}'),
//           buildSimpleRow('Tax', '\$${invoice.tax.toStringAsFixed(2)}'),
//           Divider(),
//           buildSimpleRow('Total', '\$${invoice.total.toStringAsFixed(2)}', size: 18),
//         ],
//       ),
//     );
//   }

//   static Widget buildSimpleRow(String title, String value, {double size = 14}) => Padding(
//         padding: EdgeInsets.symmetric(vertical: 0.25 * PdfPageFormat.cm),
//         child: Row(
//           mainAxisAlignment: MainAxisAlignment.spaceBetween,
//           children: [
//             buildSimpleText
// Future<void> generatePDF() async {
//   final pdf = pw.Document();

//   pdf.addPage(
//     pw.Page(
//       pageFormat: PdfPageFormat.a4,
//       build: (pw.Context context) {
//         return pw.Center(
//           child: pw.Column(
//             mainAxisAlignment: pw.MainAxisAlignment.center,
          
//             children: <pw.Widget>[
//               pw.Text('Invoice',
//                   style: pw.TextStyle(fontSize: 40, fontWeight: pw.FontWeight.bold)),
//               pw.SizedBox(height: 20),
//               pw.Text('Invoice Number: $invoiceNumber',
//                   style: pw.TextStyle(fontSize: 20)),
//               pw.Text('Customer Name: $customerName', style: pw.TextStyle(fontSize: 20)),
//               pw.SizedBox(height: 20),
//               pw.Table.fromTextArray(
//                 context: context,
//                 data: <List<String>>[
//                   <String>['Item', 'Quantity', 'Price'],
//                   ...items.map((item) => [item.name, item.quantity.toString(), '\$${item.price}'])
//                 ],
//             ]
//               ),
//               pw.SizedBox(height: 20),
//               pw.Row(
//                 mainAxisAlignment: pw.MainAxisAlignment.end,
//                 children: <pw.Widget>[
//                   pw.Text('Total: \$${calculateTotal()}',
//                       style: pw.TextStyle(fontSize: 20)),
//                 ],
//               ),
//             ],
//           ),
//         );
//       },
//     ),
//   );

//   final output = await getTemporaryDirectory();
//   final file = File("${output.path}/invoice_$invoiceNumber.pdf");
//   await file.writeAsBytes(await pdf.save());

//   ScaffoldMessenger.of(context).showSnackBar(
//     SnackBar(content: Text('Bill generated successfully!')),
//   );
// }
// }
